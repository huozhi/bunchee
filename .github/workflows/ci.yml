name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  install_and_test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        node-version: [14, 16, 18]

    name: Node ${{ matrix.node-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get Yarn Cache Directory Path
        id: cache_keys
        run: |
          echo "CACHE_DIR=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "CACHE_KEY=${{ runner.os }}-node-${{ matrix.node-version }}-yarn-" >> $GITHUB_OUTPUT

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache_keys.outputs.CACHE_DIR }}
          key: yarn-cache-${{ steps.cache_keys.outputs.CACHE_KEY }}
          restore-keys: |
            yarn-cache-
            yarn-cache-${{ steps.cache_keys.outputs.CACHE_KEY }}

      - name: Install Dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Lint
        run: |
          yarn typecheck
          yarn build
          yarn test


  release:
    runs-on: ubuntu-latest
    needs: [install_and_test]
    if: startsWith(github.ref, 'refs/tags/')
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Determine tag
        id: determine_tag
        run: |
          echo "tag=$(echo $GITHUB_REF | grep -Eo 'alpha|beta|rc')" >> $GITHUB_OUTPUT

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ needs.install_and_test.steps.cache_keys.outputs.CACHE_DIR }}
          key: ${{ needs.install_and_test.steps.cache_keys.outputs.CACHE_KEY }}
          restore-keys: ${{ needs.install_and_test.steps.cache_keys.outputs.CACHE_KEY }}

      - name: Add auth token to npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

      - name: Publish to versioned tag
        if: steps.determine_tag.outputs.tag != ''
        run: |
          echo "Publishing to ${{ steps.determine_tag.outputs.tag }} tag"
          npm publish --tag ${{ steps.determine_tag.outputs.tag }}

      - name: Publish to latest
        if: steps.determine_tag.outputs.tag == ''
        run: |
          echo "Publishing to latest"
          npm publish
