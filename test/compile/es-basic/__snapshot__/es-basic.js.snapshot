function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
function* generator() {
    yield 1;
}
function asyncFunc() {
    return _asyncFunc.apply(this, arguments);
}
function _asyncFunc() {
    _asyncFunc = _async_to_generator(function*() {
        yield new Promise((r)=>r(1));
    });
    return _asyncFunc.apply(this, arguments);
}
var _x = /*#__PURE__*/ _class_private_field_loose_key("_x");
class A {
    *f1() {
        yield 1;
    }
    constructor(){
        Object.defineProperty(this, _x, {
            writable: true,
            value: void 0
        });
        _class_private_field_loose_base(this, _x)[_x] = 1;
        this.getX = ()=>{
            return _class_private_field_loose_base(this, _x)[_x];
        };
    }
}
const _v = 123;
const x = ()=>`value:${_v}`;

export { A, asyncFunc, generator, x };
