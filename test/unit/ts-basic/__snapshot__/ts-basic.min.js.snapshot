let n=(n,t)=>n+t;function t(n,t,r,e,o,i,u){try{var a=n[i](u),c=a.value}catch(n){r(n);return}a.done?t(c):Promise.resolve(c).then(e,o)}function r(n){return function(){var r=this,e=arguments;return new Promise(function(o,i){var u=n.apply(r,e);function a(n){t(u,o,i,a,c,"next",n)}function c(n){t(u,o,i,a,c,"throw",n)}a(void 0)})}}function e(){return(e=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(n[e]=r[e])}return n}).apply(this,arguments)}let o=3,i={a:1,b:2},u=e({},i);function a(){return c.apply(this,arguments)}function c(){return(c=r(function*(){yield new Promise(n=>n(1))})).apply(this,arguments)}export{a as asyncFunc,u as clone,o as default};
